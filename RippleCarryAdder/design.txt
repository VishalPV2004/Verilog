module fulladder(input a, b, c, output reg sum, carry);
  
  reg w1, w2, w3;
  always @(a, b, c)
    begin
      sum = a ^ b ^ c;
      w1 = a & b;
      w2 = b & c;
      w3 = a & c;
      carry = w1 | w2 | w3;
    end
endmodule

module RippleCarryAdder(input [3:0] a, b, input c, output cout, output [3:0] s);
  
  wire c1, c2, c3;

  fulladder fa0(a[0], b[0], c, s[0], c1);
  fulladder fa1(a[1], b[1], c1, s[1], c2);
  fulladder fa2(a[2], b[2], c2, s[2], c3);
  fulladder fa3(a[3], b[3], c3, s[3], cout);

endmodule